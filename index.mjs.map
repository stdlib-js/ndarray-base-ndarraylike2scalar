{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport resolveGetter from '@stdlib/array-base-resolve-getter';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\n\n\n// MAIN //\n\n/**\n* Converts an ndarray-like object to a scalar value.\n*\n* @param {ndarrayLike} x - ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @returns {*} scalar value\n*\n* @example\n* import scalar2ndarray from '@stdlib/ndarray-from-scalar';\n*\n* var x = scalar2ndarray( 1.0 );\n* // returns <ndarray>\n*\n* var out = ndarraylike2scalar( x );\n* // returns 1.0\n*/\nfunction ndarraylike2scalar( x ) {\n\tvar buf = getData( x );\n\tvar get = resolveGetter( buf );\n\treturn get( buf, getOffset( x ) );\n}\n\n\n// EXPORTS //\n\nexport default ndarraylike2scalar;\n"],"names":["ndarraylike2scalar","x","buf","getData","resolveGetter","get","getOffset"],"mappings":";;qSAkDA,SAASA,EAAoBC,GAC5B,IAAIC,EAAMC,EAASF,GAEnB,OADUG,EAAeF,EAClBG,CAAKH,EAAKI,EAAWL,GAC7B"}